//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Посчитать сумму по всем товарам в документе
Функция СуммаПоТоварамВДокументе()
	СуммаПоТоварам = 0;
	Возврат Товары.Итог("Сумма");
КонецФункции

// Формирование печатной формы документа
// 
// Параметры: 
//  Нет. 
// 
// Возвращаемое значение: 
//  ТабличныйДокумент - Сформированный табличный документ.
Процедура ПечатнаяФорма(ТабличныйДокумент) Экспорт
	Макет = Документы.РасходТовара.ПолучитьМакет("МакетПечати");

	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	ТабличныйДокумент.Вывести(Область);
	
	// Получаем сумму по всем товарам
	СуммаПоТоварам = СуммаПоТоварамВДокументе();
	
	// Определяем валюту
	ТекущаяВалюта = Валюта;	
	Если ТекущаяВалюта.Пустая() Тогда
		ТекущаяВалюта = Константы.ВалютаУчета.Получить();
	КонецЕсли;
	
	// Формируем параметры валюты
	ПараметрыТекущейВалюты = "";
	Если Не ПустаяСтрока(ТекущаяВалюта.НаименованиеОсновнойВалюты) Тогда
		ПараметрыТекущейВалюты = ПараметрыТекущейВалюты + ТекущаяВалюта.НаименованиеОсновнойВалюты + ",";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекущаяВалюта.НаименованиеРазменнойВалюты) Тогда
		ПараметрыТекущейВалюты = ПараметрыТекущейВалюты + ТекущаяВалюта.НаименованиеРазменнойВалюты + ",";
	КонецЕсли;	
	Если Не ПустаяСтрока(ПараметрыТекущейВалюты) Тогда
		ПараметрыТекущейВалюты = ПараметрыТекущейВалюты + "2";
	КонецЕсли;

	СуммаПоТоварамПрописью = Новый Массив;
	
	ВариантыПростойПрописиСуммыПоТоварам = ПолучитьСклоненияСтрокиПоЧислу(ПараметрыТекущейВалюты, СуммаПоТоварам,,
		"ЧС=Количественное", "ПД=Именительный; ПЧ=Число");
	Если Не ВариантыПростойПрописиСуммыПоТоварам.Количество() = 0 Тогда                                             
		ПолужирныйШрифт = Новый Шрифт(Макет.Область("СуммаПоТоварам").Шрифт, , , Истина);
		СуммаПоТоварамПрописью.Добавить(Новый ФорматированнаяСтрока(ВариантыПростойПрописиСуммыПоТоварам[0], ПолужирныйШрифт,,));
	КонецЕсли;	
	
	ВариантыСложнойПрописиСуммыПоТоварам = ПолучитьСклоненияСтрокиПоЧислу(ПараметрыТекущейВалюты, СуммаПоТоварам,,
		"ЧС=Количественное", "ПД=Именительный; ПЧ=ЧислоПрописью");
	Если Не ВариантыСложнойПрописиСуммыПоТоварам.Количество() = 0 Тогда
		СуммаПоТоварамПрописью.Добавить(" " + "(" + ВариантыСложнойПрописиСуммыПоТоварам[0] + ")"); 
	КонецЕсли;
	
	// Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(ЭтотОбъект);
		
	Если СуммаПоТоварамПрописью.Количество() > 0 Тогда
		Шапка.Параметры.СуммаПоТоварам = Новый ФорматированнаяСтрока(СуммаПоТоварамПрописью);
	Иначе
		Шапка.Параметры.СуммаПоТоварам = СуммаПоТоварам; 
	КонецЕсли;

	ТабличныйДокумент.Вывести(Шапка);

	// Товары
	Область = Макет.ПолучитьОбласть("ТоварыШапка");
	ТабличныйДокумент.Вывести(Область);
	ОбластьТовары = Макет.ПолучитьОбласть("Товары");

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		ОбластьТовары.Параметры.Заполнить(ТекСтрокаТовары);
		ТабличныйДокумент.Вывести(ОбластьТовары);
	КонецЦикла;
КонецПроцедуры

// Формирование печатной формы документа
// 
// Параметры: 
//  Нет. 
// 
// Возвращаемое значение: 
//  ТабличныйДокумент - Сформированный табличный документ.
Процедура Пересчитать() Экспорт

	Для каждого ТекСтрокаТовары Из Товары Цикл

		ТекСтрокаТовары.Сумма = ТекСтрокаТовары.Количество * ТекСтрокаТовары.Цена;

	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

Процедура ОбработкаПроведения(Отказ, Режим)

	// Создадим запрос, чтобы получать информацию об услугах
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СУММА(ТоварыВДокументе.Количество) КАК Количество,
	|	СУММА(ТоварыВДокументе.Сумма) КАК Сумма,
	|	ТоварыВДокументе.Товар.Вид КАК ТоварВид,
	|	ТоварыВДокументе.Товар КАК Товар,
	|	МАКСИМУМ(ТоварыВДокументе.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ТЧГруппировка
	|ИЗ
	|	Документ.РасходТовара.Товары КАК ТоварыВДокументе
	|ГДЕ
	|	ТоварыВДокументе.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВДокументе.Товар.Вид,
	|	ТоварыВДокументе.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГруппировка.Количество,
	|	ТЧГруппировка.Сумма,
	|	ТЧГруппировка.Товар
	|ИЗ
	|	ТЧГруппировка КАК ТЧГруппировка
	|ГДЕ
	|	ТЧГруппировка.ТоварВид = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГруппировка.Количество,
	|	ТЧГруппировка.Сумма,
	|	ТЧГруппировка.Товар
	|ИЗ
	|	ТЧГруппировка КАК ТЧГруппировка
	|ГДЕ
	|	ТЧГруппировка.ТоварВид = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Товар)");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	//мой коммент из master
	
	ТаблицаУслуги = Результат.Получить(1).Выгрузить();
	ТаблицаТовары = Результат.Получить(2).Выгрузить();

	//Сначала пишет то что не требует контроля остатков, чтобы не висели долго заблокированные записи регистре
	Движения.Продажи.Записывать = Истина;
	Для каждого ТекСтрокаТовары Из ТаблицаУслуги Цикл
		Движение = Движения.Продажи.Добавить();
		Движение.Период = Дата;
		Движение.Товар = ТекСтрокаТовары.Товар;
		Движение.Покупатель = Покупатель;
		Движение.Количество = ТекСтрокаТовары.Количество;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
	КонецЦикла;
	
	// Формирование движения регистра накопления Взаиморасчеты.
	Движения.Взаиморасчеты.Записывать = Истина;
	Движение = Движения.Взаиморасчеты.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Период = Дата;
	Движение.Контрагент = Покупатель;
	Движение.Валюта = Валюта;

	Если Валюта.Пустая() Тогда
		Движение.Сумма = Товары.Итог("Сумма");
	Иначе
		Курс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта)).Курс;
		Если Курс = 0 Тогда
			Движение.Сумма = Товары.Итог("Сумма");
		Иначе
			Движение.Сумма = Товары.Итог("Сумма") / Курс;
		КонецЕсли;
	КонецЕсли;
	
	Движения.Записать();
	
	//Контроль остатков
	Для каждого ТекСтрокаТовары Из ТаблицаТовары Цикл			
		Движение = Движения.ТоварныеЗапасы.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Товар = ТекСтрокаТовары.Товар;
		Движение.Склад = Склад;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;
	
	Если Режим = РежимПроведенияДокумента.Оперативный Тогда
		Движения.ТоварныеЗапасы.БлокироватьДляИзменения = Истина;
	КонецЕсли;	

	Движения.ТоварныеЗапасы.Записать();

	//Контроль остатков при оперативном проведении
	Если Режим = РежимПроведенияДокумента.Оперативный Тогда
		// Создадим запрос, чтобы контролировать остатки по товарам
		Запрос.Текст = "ВЫБРАТЬ
		|	ТоварыВДокументе.Товар КАК Товар,
		|	ТоварыВДокументе.Количество КАК Количество,
		|	ТоварыВДокументе.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ТребуетсяТовараЗапасы
		|ИЗ
		|	ТЧГруппировка КАК ТоварыВДокументе
		|ГДЕ
		|	ТоварыВДокументе.ТоварВид = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Товар)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ТребуетсяТовараЗапасы.Товар) КАК ТоварПредставление,
		|	ТребуетсяТовараЗапасы.НомерСтроки КАК НомерСтроки,
		|	-ТоварныеЗапасыОстатки.КоличествоОстаток КАК Превышение
		|ИЗ
		|	ТребуетсяТовараЗапасы КАК ТребуетсяТовараЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварныеЗапасы.Остатки(&Период, Товар В
		|			(ВЫБРАТЬ
		|				ТребуетсяТовараЗапасы.Товар
		|			ИЗ
		|				ТребуетсяТовараЗапасы)
		|		И Склад = &Склад) КАК ТоварныеЗапасыОстатки
		|		ПО ТребуетсяТовараЗапасы.Товар = ТоварныеЗапасыОстатки.Товар
		|ГДЕ
		|	0 > ЕСТЬNULL(ТоварныеЗапасыОстатки.КоличествоОстаток, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени(),ВидГраницы.Включая));
		РезультатСНехваткой = Запрос.Выполнить();

		ВыборкаРезультатаСНехваткой = РезультатСНехваткой.Выбрать();

		// Выдадим ошибки для строк, в которых не хватает остатка
		Пока ВыборкаРезультатаСНехваткой.Следующий() Цикл
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = СтрШаблон(Нстр("ru = 'Не хватает %1 единиц товара %2 на складе %3.'"),
				ВыборкаРезультатаСНехваткой.Превышение,
				ВыборкаРезультатаСНехваткой.ТоварПредставление,
				Склад);
			Сообщение.Поле = СтрШаблон("Товары[%1].Количество",ВыборкаРезультатаСНехваткой.НомерСтроки - 1);
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЦикла;
	КонецЕсли;
	
	//Списание по партиям
	Движения.ПартииНоменклатуры.Записывать = Истина;
	Движения.ПартииНоменклатуры.Записать();	

	//комментарий для коммита
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПартииНоменклатуры");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаТовары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Товар","Товар");
	Блокировка.Заблокировать();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыВДокументе.Товар КАК Товар,
	|	ТоварыВДокументе.Количество КАК Количество
	|ПОМЕСТИТЬ ТребуетсяТовараПартии
	|ИЗ
	|	ТЧГруппировка КАК ТоварыВДокументе
	|ГДЕ
	|	ТоварыВДокументе.ТоварВид = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Товар)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребуетсяТовараПартии.Товар КАК Товар,
	|	ПРЕДСТАВЛЕНИЕ(ТребуетсяТовараПартии.Товар) КАК ТоварПредставление,
	|	ТребуетсяТовараПартии.Количество КАК КоличествоДок,
	|	ПартииНоменклатурыОстатки.Партия,
	|	ЕСТЬNULL(ПартииНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ПартииНоменклатурыОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	ТребуетсяТовараПартии КАК ТребуетсяТовараПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииНоменклатуры.Остатки(&Период,) КАК ПартииНоменклатурыОстатки
	|		ПО ТребуетсяТовараПартии.Товар = ПартииНоменклатурыОстатки.Товар
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииНоменклатурыОстатки.Партия.МоментВремени
	|ИТОГИ
	|	СУММА(КоличествоОстаток),
	|	МАКСИМУМ(КоличествоДок) КАК КоличествоДок
	|ПО
	|	Товар";
	Запрос.УстановитьПараметр("Период",МоментВремени());
	
	ВыборкаТовар = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТовар.Следующий() Цикл
		
		Превышение = ВыборкаТовар.КоличествоДок - ВыборкаТовар.КоличествоОстаток;
		Если Превышение > 0 Тогда
			Сообщить(СтрШаблон("Прквышение остатка по номенклатуре %1 в количестве %2",
				ВыборкаТовар.ТоварПредставление, Превышение));
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ОсталосьСписать = ВыборкаТовар.КоличествоДок;
		Выборка = ВыборкаТовар.Выбрать();
		
		Пока Выборка.Следующий() И ОсталосьСписать<>0 Цикл
			
			Списываем = Мин(ОсталосьСписать, Выборка.КоличествоОстаток); //либо всю партию, либо остаточное количество
			
			Движение = Движения.ПартииНоменклатуры.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Товар = Выборка.Товар;
			Движение.Партия = Выборка.Партия;
			Движение.Количество = Списываем;
			Движение.Сумма = Списываем / Выборка.КоличествоОстаток * Выборка.СуммаОстаток; //списываем в пропорции
			
			ОсталосьСписать = ОсталосьСписать - Списываем;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.Управленческий.Записывать = Истина;
	Движения.Управленческий.Записать();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
	ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.Товары);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаТовары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПланыВидовХарактеристик.ВидыСубконто.Товар,"Товар");
	Блокировка.Заблокировать();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыВДокументе.Товар КАК Товар,
	|	СУММА(ТоварыВДокументе.Количество) КАК Количество,
	|	СУММА(ТоварыВДокументе.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ТребуетсяТовараУправленческий
	|ИЗ
	|	ТЧГруппировка КАК ТоварыВДокументе
	|ГДЕ
	|	ТоварыВДокументе.ТоварВид = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Товар)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВДокументе.Товар
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребуетсяТовараУправленческий.Товар КАК Товар,
	|	ПРЕДСТАВЛЕНИЕ(ТребуетсяТовараУправленческий.Товар) КАК ТоварПредставление,
	|	ТребуетсяТовараУправленческий.Количество КАК КоличествоДок,
	|	УправленческийОстатки.Субконто2 КАК Партия,
	|	ЕСТЬNULL(УправленческийОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(УправленческийОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	ТребуетсяТовараУправленческий КАК ТребуетсяТовараУправленческий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(&Период, Счет = &СчетТовары, &Субконто, Субконто1 В
	|			(ВЫБРАТЬ
	|				Т.Товар
	|			ИЗ
	|				ТребуетсяТовараУправленческий КАК Т)
	|		И Организация = &Организация
	|		И Субконто3 = &Склад) КАК УправленческийОстатки
	|		ПО ТребуетсяТовараУправленческий.Товар = УправленческийОстатки.Субконто1
	|
	|УПОРЯДОЧИТЬ ПО
	|	УправленческийОстатки.Субконто2.Дата
	|ИТОГИ
	|	СУММА(СуммаОстаток),
	|	СУММА(КоличествоОстаток),
	|	МАКСИМУМ(КоличествоДок) КАК КоличествоДок
	|ПО
	|	Товар";
	
	Запрос.УстановитьПараметр("Период",МоментВремени());
	Запрос.УстановитьПараметр("СчетТовары",ПланыСчетов.Управленческий.Товары);
	Субконто = Новый Массив(3);
	Субконто[0] = ПланыВидовХарактеристик.ВидыСубконто.Товар;
	Субконто[1] = ПланыВидовХарактеристик.ВидыСубконто.Партия;
	Субконто[2] = ПланыВидовХарактеристик.ВидыСубконто.Склад;		
	Запрос.УстановитьПараметр("Субконто",Субконто);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Превышение = Выборка.КоличествоДок -Выборка.КоличествоОстаток;
		Если Превышение > 0 Тогда
			Сообщить(СтрШаблон("Прквышение остатка по номенклатуре %1 в количестве %2",
				Выборка.ТоварПредставление, Превышение));
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ОсталосьСписать = Выборка.КоличествоДок;
		
		СуммаПоТовару = Выборка.СуммаОстаток;
		КоличествоПоТовару = Выборка.КоличествоОстаток;
		
		СуммовойОстаток = Выборка.СуммаОстаток;
		КоличественныйОстаток = Выборка.КоличествоОстаток;
		
		ВыборкаДетали = Выборка.Выбрать();
		
		Пока ВыборкаДетали.Следующий() И ОсталосьСписать<>0 Цикл
			
			КоличествоСписываем = Мин(ВыборкаДетали.КоличествоОстаток,ОсталосьСписать);
			
			Проводка = Движения.Управленческий.Добавить();
			
			Проводка.Период = Дата;
			Проводка.Организация = Организация;
			Проводка.СчетДт = ПланыСчетов.Управленческий.ПрибылиУбытки;
			Проводка.СчетКт = ПланыСчетов.Управленческий.Товары;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Товар] = ВыборкаДетали.Товар;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Склад] = Склад;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Партия] = ВыборкаДетали.Партия;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Покупатель;
			
			Проводка.КоличествоКт = КоличествоСписываем;
			Если КоличествоСписываем=КоличественныйОстаток Тогда
				СуммаСписываем = СуммовойОстаток;
			Иначе
				СуммаСписываем = КоличествоСписываем / ВыборкаДетали.КоличествоОстаток * ВыборкаДетали.СуммаОстаток;
			КонецЕсли;
			Проводка.Сумма = СуммаСписываем;
			Проводка.КоличествоКт = КоличествоСписываем;
			
			КоличественныйОстаток = КоличественныйОстаток - КоличествоСписываем;
			СуммовойОстаток = СуммовойОстаток - Проводка.Сумма;
			
			ОсталосьСписать = ОсталосьСписать - КоличествоСписываем;   
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	//Удалим из списка проверяемых реквизитов валюту, если по организации не ведется 
	//валютный учет
	Если НЕ ПолучитьФункциональнуюОпцию("ВалютныйУчет", Новый Структура("Организация", Организация)) Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Валюта"));
	КонецЕсли;	
	
	
	// Проверим заполненность поля "Покупатель"
	Если Покупатель.Пустая() Тогда

		// Если поле Покупатель не заполнено, сообщим об этом пользователю
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не указан Покупатель, для которого выписывается накладная!'", "ru");
		Сообщение.Поле = НСтр("ru = 'Покупатель'", "ru");
		Сообщение.УстановитьДанные(ЭтотОбъект);

		Сообщение.Сообщить();

		// Сообщим платформе, что мы сами обработали проверку заполнения поля "Покупатель"
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Покупатель"));
		// Так как информация в документе не консистентна, то продолжать работу дальше смысла нет
		Отказ = Истина;

	КонецЕсли;

	//Если склад не заполнен, то проверим есть ли в документе что-то кроме услуг
	Если Склад.Пустая() И Товары.Количество() > 0 Тогда

		// Создадим запрос, чтобы получать информацию об товарах
		Запрос = Новый Запрос("ВЫБРАТЬ
							  |    Количество(*) КАК Количество
							  |ИЗ
							  |    Справочник.Товары КАК Товары
							  |ГДЕ
							  |    Товары.Ссылка В (&ТоварыВДокументе)
							  |    И Товары.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Товар)");

		Запрос.УстановитьПараметр("ТоварыВДокументе", Товары.ВыгрузитьКолонку("Товар"));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Выборка.Количество = 0 Тогда
			// Сообщим платформе, что мы сами обработали проверку заполнения поля "Склад"
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Склад"));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Заказ") Тогда
		Организация = ДанныеЗаполнения.Организация;
		Склад = ДанныеЗаполнения.Склад;
		Покупатель = ДанныеЗаполнения.Покупатель;
		Валюта = ДанныеЗаполнения.Валюта;
		ВидЦен = ДанныеЗаполнения.ВидЦен;
		
		Для каждого ТоварОснование Из ДанныеЗаполнения.Товары цикл
	        Товар = Товары.Добавить();
	        ЗаполнитьЗначенияСвойств(Товар, ТоварОснование);		
	    КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Контрагенты") Тогда

		ЗапросПоКонтрагенту = Новый Запрос("ВЫБРАТЬ
		                                   |	Контрагенты.ЭтоГруппа,
		                                   |	Контрагенты.ВидЦен
		                                   |ИЗ
		                                   |	Справочник.Контрагенты КАК Контрагенты
		                                   |ГДЕ
		                                   |	Контрагенты.Ссылка = &КонтрагентСсылка");
		ЗапросПоКонтрагенту.УстановитьПараметр("КонтрагентСсылка", ДанныеЗаполнения);
		Выборка = ЗапросПоКонтрагенту.Выполнить().Выбрать();
		Если Выборка.Следующий() И Выборка.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
		
		ВидЦен     = Выборка.ВидЦен;
		Покупатель = ДанныеЗаполнения.Ссылка;

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда

		Значение = Неопределено;

		Если ДанныеЗаполнения.Свойство("Покупатель", Значение) Тогда
			ВидЦен = Значение.ВидЦен;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

