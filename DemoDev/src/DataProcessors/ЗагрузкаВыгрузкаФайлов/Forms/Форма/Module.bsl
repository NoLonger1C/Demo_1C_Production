  
//Работа с двоичными данными
//ПолучитьДвоичныеДанныеИзСтроки();
//ПолучитьСтрокуИзДвоичныхДанных(); 

///////////////////////////////ЗАГРУЗКА///////////////////////////////

///////////////////////////////Новая асинхронность///////////////////////////////

///////С диалогом/////////////
&НаКлиенте
Процедура ЗагрузитьФайлАсинхронноНовая(Команда)	
	ЗагрузитьФайлСДиалогомАсинхронноНовая();  	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьФайлСДиалогомАсинхронноНовая()
			
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов("Выберите файл", Ложь);
	Обещание = Ждать ПоместитьФайлНаСерверАсинх(,,,ПараметрыДиалога,ЭтаФорма.УникальныйИдентификатор); 
	Если НЕ Обещание = Неопределено Тогда 
		Расширение = Обещание.СсылкаНаФайл.Расширение;
		Если Расширение = ".txt" Тогда
			ПрочитатьTXT(Обещание.Адрес);
		ИначеЕсли Расширение = ".xls" ИЛИ Расширение = ".xlsx"  Тогда
			ПрочитатьEXCEL(Обещание.СсылкаНаФайл.Файл.ПолноеИмя);
		ИначеЕсли Расширение = ".mxl" Тогда
			ПрочитатьMXL(Обещание.Адрес); 
		ИначеЕсли Расширение = ".xml" Тогда
            ПроочитатьXML(Обещание.Адрес); 
		ИначеЕсли Расширение = ".json" Тогда
			ПроочитатьJSON(Обещание.Адрес);
		КонецЕсли; 		
	КонецЕсли;
		
КонецПроцедуры 

///////Без диалога/////////////
&НаКлиенте
Процедура ЗагрузитьБезДиалога(Команда)
	ЗагрузитьБезДиалогаАсинхронноНовая();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьБезДиалогаАсинхронноНовая()
		
	Обещание = Ждать ПоместитьФайлНаСерверАсинх(,,,Путь,ЭтаФорма.УникальныйИдентификатор); 
	Если НЕ Обещание = Неопределено Тогда 
		Расширение = Обещание.СсылкаНаФайл.Расширение;
		Если Расширение = ".txt" Тогда
			ПрочитатьTXT(Обещание.Адрес);
		ИначеЕсли Расширение = ".xls" ИЛИ Расширение = ".xlsx" Тогда
			ПрочитатьEXCEL(Обещание.СсылкаНаФайл.Файл.ПолноеИмя);
		ИначеЕсли Расширение = ".mxl" Тогда
			ПрочитатьMXL(Обещание.Адрес);
		КонецЕсли; 		
	КонецЕсли;
		
КонецПроцедуры  

///////////////////////////////Старая асинхронность///////////////////////////////

///////С диалогом/////////////

&НаКлиенте
Процедура ЗагрузитьФайлАсинхронноСтарая(Команда)
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов("Выберите файл", Ложь);
	ОбработкаПомещенияФайлов = Новый ОписаниеОповещения("ПродолжитьЗагрузкуФайла",ЭтотОбъект);
	НачатьПомещениеФайлаНаСервер(ОбработкаПомещенияФайлов,,,,ПараметрыДиалога,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗагрузкуФайла(ОписаниеПомещенногоФайла,ДополнительныеПараметры) Экспорт
	
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;	                                          
	КонецЕсли;  
	
	Расширение = ОписаниеПомещенногоФайла.СсылкаНаФайл.Расширение;
	Если Расширение = ".txt" Тогда
		ПрочитатьTXT(ОписаниеПомещенногоФайла.Адрес);
	ИначеЕсли Расширение = ".xls" ИЛИ Расширение = ".xlsx" Тогда
		ПрочитатьEXCEL(ОписаниеПомещенногоФайла.СсылкаНаФайл.Файл.ПолноеИмя); 
	ИначеЕсли Расширение = ".mxl" Тогда
		ПрочитатьMXL(ОписаниеПомещенногоФайла.Адрес);
	КонецЕсли; 		

КонецПроцедуры  

///////Без диалога/////////////
&НаКлиенте
Процедура ЗагрузитьФайлБезДиалогаАсинхронноСтарая(Команда)
	
	ОбработкаПомещенияФайлов = Новый ОписаниеОповещения("ПродолжитьЗагрузкуФайла",ЭтотОбъект);
	НачатьПомещениеФайлаНаСервер(ОбработкаПомещенияФайлов,,,,Путь,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

///////////////////////////////Чтение файлов///////////////////////////////

&НаСервере
Процедура ПрочитатьTXT(Адрес)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	////////////Читаем сразу в строку из Двоичных данных////////////
	Строка = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	
	////////////Чтение во временный файл и из него////////////
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанные.Записать(ИмяВременногоФайла); 
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,КодировкаТекста.UTF8);
	Строка = ЧтениеТекста.Прочитать();
	
	////////////Чтение построчное////////////
	
	//1. Чтение буффером, быстрое построчное
	БуффДД = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДвоичныеДанные);
	мБуффеорв = БуффДД.Разделить(ПолучитьБуферДвоичныхДанныхИзСтроки(Символы.ПС));
	мРезультат = Новый Массив;
	Для Каждого СтрБуфф ИЗ мБуффеорв Цикл  
		мРезультат.Добавить(ПолучитьСтрокуИзБуфераДвоичныхДанных(СтрБуфф));		
	КонецЦикла; 
	Строка = СтрСоединить(мРезультат, " ");
	
	//2. Чтение данных разделить
	Чтение = Новый ЧтениеДанных(ДвоичныеДанные); 
	мЧтение = Чтение.Разделить(ПолучитьБуферДвоичныхДанныхИзСтроки(Символы.ПС));
	Чтение.Закрыть();
	мРезультат = Новый Массив;
	Для Каждого ТекЧтение ИЗ мЧтение Цикл  
		мРезультат.Добавить(ПолучитьСтрокуИзДвоичныхДанных(ТекЧтение.ПолучитьДвоичныеДанные()));		
	КонецЦикла; 
	Строка = СтрСоединить(мРезультат, " ");
	
	//3. Чтение данных
	Чтение = Новый ЧтениеДанных(ДвоичныеДанные); 
	мРезультат = Новый Массив;
	Пока Истина Цикл  
		Если Чтение.ЧтениеЗавершено Тогда
			Прервать;
		КонецЕсли;
		мРезультат.Добавить(Чтение.ПрочитатьСтроку());   
	КонецЦикла; 
	Строка = СтрСоединить(мРезультат, " ");
	
	//4. Чтение текста
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанные.Записать(ИмяВременногоФайла); 
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,КодировкаТекста.UTF8);
	мРезультат = Новый Массив;
	Пока Истина Цикл  
		ЧтениеСтроки = ЧтениеТекста.ПрочитатьСтроку();
		Если ЧтениеСтроки = Неопределено Тогда
			Прервать;
		КонецЕсли;
		мРезультат.Добавить(ЧтениеСтроки);   
	КонецЦикла; 
	Строка = СтрСоединить(мРезультат, " ");    
	
	//5. Текстовый документ
	ТекстовыйДокумент = Новый ТекстовыйДокумент; 
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ТекстовыйДокумент.Прочитать(Поток,КодировкаТекста.UTF8,Символы.ПС);
	Строка = ТекстовыйДокумент.ПолучитьТекст();
	
КонецПроцедуры  

&НаСервере
Процедура ПрочитатьEXCEL(ПутьКФайлу)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ПутьКФайлу,СпособЧтенияЗначенийТабличногоДокумента.Текст); 
	
	//1. Обход таблицы
	КолСтрок = ТабличныйДокумент.ВысотаТаблицы;
	КолКолонок = ТабличныйДокумент.ШиринаТаблицы;
	
	Для НомерСтроки = 2 По КолСтрок Цикл	
		Значение1 = ТабличныйДокумент.Область(НомерСтроки,1).Текст;		
		Значение2 = ТабличныйДокумент.Область(НомерСтроки,2).Текст;		
		Значение3 = ТабличныйДокумент.Область(НомерСтроки,3).Текст;				
	КонецЦикла;  
	
	//2. Построитель запросов 
	
	//Для многостраничного
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		ЧитаемаяОбласть = ТабличныйДокумент.ПолучитьОбласть(Область.Имя);
		Если СтрНачинаетсяС(Область.Имя, "Лист") Тогда	
			ПостроительЗапроса = Новый ПостроительЗапроса;
			ИсточникДанных = ЧитаемаяОбласть.Область(1, 1, ЧитаемаяОбласть.ВысотаТаблицы, ЧитаемаяОбласть.ШиринаТаблицы);
			ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ИсточникДанных);
			ПостроительЗапроса.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
			ПостроительЗапроса.ЗаполнитьНастройки();
			ПостроительЗапроса.Выполнить();
			Таблица = ПостроительЗапроса.Результат.Выгрузить();
		Иначе	
			Сообщить("Область с именем " + Область.Имя + " не известна.");
		КонецЕсли;	
	КонецЦикла;

	//Для одностраничного
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
	Построитель.ЗаполнитьНастройки();
	Построитель.Выполнить();
	
	Таблица = Построитель.Результат.Выгрузить();   
	
	//3.OLE. Доблжно быть установлено Excel
	Попытка
	
		Excel = Новый COMОбъект("Excel.Application");
		Excel.Visible = 0;
		Excel.DisplayAlerts = 0;
		
		Книга = Excel.WorkBooks.Open(ПутьКФайлу);
		КолвоЛистов = Книга.Sheets.Count;
		Лист = Книга.Sheets(1);  
		КоличествоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
		КоличествоКолонок = Лист.Cells(1,1).SpecialCells(11).Column;
		
		Для НомерСтроки =1 По КоличествоСтрок Цикл			
			Значение1 = Лист.Cells(НомерСтроки,1).Value;		
			Значение2 = Лист.Cells(НомерСтроки,2).Value;		
			Значение3 = Лист.Cells(НомерСтроки,3).Value;			
		КонецЦикла; 
		
		Excel.WorkBooks.Close();
		Excel.Quit();  
		
	Исключение		
		Сообщить(ОписаниеОшибки());		
	КонецПопытки;  
	
	//4. ADO. Не требует Excel
	Попытка
		//https://www.connectionstrings.com/excel-2013/
		СтрокаСоединения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source="+ПутьКФайлу+";
			|Extended Properties=""Excel 12.0 Xml;HDR=YES""";
		ADOBD = Новый COMОбъект("ADODB.Connection");
	   	ADOBD.Open(СтрокаСоединения);
		
		ТекстЗапроса = "SELECT * [Лист1$]";
		Выборка = Новый COMОбъект("ADODB.RecordSet");
        Выборка.Open(ТекстЗапроса,ADOBD); 
		
		Пока Выборка.EOF() = Ложь Цикл
			Значение1 = Выборка.fields(0).Value;		
			Значение2 = Выборка.fields(1).Value;		
			Значение3 = Выборка.fields(2).Value; 
			Выборка.MoveNext();
		КонецЦикла;
		
		Выборка.Close();
		ADOBD.Close();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры   

&НаСервере
Процедура ПрочитатьMXL(Адрес)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(Поток,СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
КонецПроцедуры

Процедура ПроочитатьXML(Адрес)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток);
	Объект = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML); 

КонецПроцедуры 

Процедура ПроочитатьJSON(Адрес)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(Поток);
	Объект = ПрочитатьJSON(ЧтениеJSON);

КонецПроцедуры



&НаКлиенте
Асинх Процедура ПутьНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Обещание = Ждать Диалог.ВыбратьАсинх();
	Если НЕ Обещание = Неопределено Тогда
	    Путь = Обещание[0];
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////ВЫГРУЗКА///////////////////////////////

///////////////////////////////Новая асинхронность///////////////////////////////

///////С диалогом/////////////
&НаКлиенте
Процедура ВыгрузкаВФайлАсинхронноНовая(Команда)
	
	ЗаписатьТекстВПотокАсинхронноНовая();

КонецПроцедуры  

&НаКлиенте
Асинх Процедура ЗаписатьТекстВПотокАсинхронноНовая()
		
	//1. Текст в двоичный данные
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Текст); 
	
	//2. Текстовый документ 
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Поток = Новый ПотокВПамяти;
	ТекстовыйДокумент.УстановитьТекст(Текст);  
	Обещание = Ждать ТекстовыйДокумент.ЗаписатьАсинх(Поток);	
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные(); 
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные,Новый УникальныйИдентификатор);	
	ПараметрыДиалогаПолученияФайлов = Новый ПараметрыДиалогаПолученияФайлов();
	ПолучитьФайлССервераАсинх(АдресХранилища,"Файл тест.txt",ПараметрыДиалогаПолученияФайлов);
	  		  
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВФайлАсинхронноСтарая(Команда)
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Текст);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные,Новый УникальныйИдентификатор);
	ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов();
	НачатьПолучениеФайлаССервера(АдресХранилища,"Файл тест.txt",ПараметрыДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаТаблицыАсинхронно(Команда)
	
	ВыгрузитьФайлАсинхронноВEXCEL();
	
КонецПроцедуры  

&НаКлиенте
Асинх Процедура ВыгрузитьФайлАсинхронноВEXCEL()
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.Фильтр = "(*.xls)|*.xls";
	
	Обещание = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
	Если НЕ Обещание = Неопределено Тогда
		 
		ТаблицаМакет.ЗаписатьАсинх(Обещание[0],ТипФайлаТабличногоДокумента.XLS);		
	
	КонецЕсли;	
	
КонецПроцедуры







	  
